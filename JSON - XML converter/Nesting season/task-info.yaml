type: edu
custom_name: stage3
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.*;
    import java.util.stream.Collectors;

    class Clue {
        String answer;
        String input;

        Clue(String answer, String input) {
            this.answer = answer.strip();
            this.input = input.strip();
        }
    }

    public class ConverterTest extends BaseStageTest<Clue> {
        public ConverterTest() throws Exception {
            super(Main.class);
        }

        static Map<String, String> allTests;

        static {
            allTests = new LinkedHashMap<>();

            allTests.put(
                "<transaction>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-000-00-00</number>\n" +
                    "    <nonattr />\n" +
                    "    <nonattr></nonattr>\n" +
                    "    <nonattr>text</nonattr>\n" +
                    "    <attr id=\"1\" />\n" +
                    "    <attr id=\"2\"></attr>\n" +
                    "    <attr id=\"3\">text</attr>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</transaction>",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"6753322\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-000-00-00\"\n" +
                    "attributes:\n" +
                    "region = \"Russia\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = null\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, nonattr\n" +
                    "value = \"text\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, attr\n" +
                    "value = \"text\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, to\n" +
                    "value = \"to_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, from\n" +
                    "value = \"from_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, subject\n" +
                    "value = \"Project discussion\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, body\n" +
                    "value = \"Body message\"\n" +
                    "attributes:\n" +
                    "font = \"Verdana\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, date\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "day = \"12\"\n" +
                    "month = \"12\"\n" +
                    "year = \"2018\""
            );

            allTests.put(
                "<node>\n" +
                    "    <child name = \"child_name1\" type = \"child_type1\">\n" +
                    "        <subchild id = \"1\" auth=\"auth1\">Value1</subchild>\n" +
                    "    </child>\n" +
                    "    <child name = \"child_name2\" type = \"child_type2\">\n" +
                    "        <subchild id = \"2\" auth=\"auth1\">Value2</subchild>\n" +
                    "        <subchild id = \"3\" auth=\"auth2\">Value3</subchild>\n" +
                    "        <subchild id = \"4\" auth=\"auth3\"></subchild>\n" +
                    "        <subchild id = \"5\" auth=\"auth3\"/>\n" +
                    "    </child>\n" +
                    "</node>",


                "Element:\n" +
                    "path = node\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name1\"\n" +
                    "type = \"child_type1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name2\"\n" +
                    "type = \"child_type2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value3\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "auth = \"auth2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"4\"\n" +
                    "auth = \"auth3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"5\"\n" +
                    "auth = \"auth3\""
            );

            allTests.put(
                "<node><child name=\"child_name1\" type=\"chil" +
                    "d_type1\"><subchild id=\"1\" auth=\"auth1\">" +
                    "Value1</subchild></child><child name=\"child" +
                    "_name2\" type=\"child_type2\"><subchild id=\"" +
                    "2\" auth=\"auth1\">Value2</subchild><subchil" +
                    "d id=\"3\" auth=\"auth2\">Value3</subchild><s" +
                    "ubchild id=\"4\" auth=\"auth3\"></subchild><su" +
                    "bchild id=\"5\" auth=\"auth3\"/></child></node>",


                "Element:\n" +
                    "path = node\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name1\"\n" +
                    "type = \"child_type1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "id = \"1\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child\n" +
                    "attributes:\n" +
                    "name = \"child_name2\"\n" +
                    "type = \"child_type2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "id = \"2\"\n" +
                    "auth = \"auth1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"Value3\"\n" +
                    "attributes:\n" +
                    "id = \"3\"\n" +
                    "auth = \"auth2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "id = \"4\"\n" +
                    "auth = \"auth3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = node, child, subchild\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "id = \"5\"\n" +
                    "auth = \"auth3\""
            );

            allTests.put(
                "<transaction>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-999-00-00</number>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</transaction>",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"6753322\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-999-00-00\"\n" +
                    "attributes:\n" +
                    "region = \"Russia\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, to\n" +
                    "value = \"to_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, from\n" +
                    "value = \"from_example@gmail.com\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, subject\n" +
                    "value = \"Project discussion\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, body\n" +
                    "value = \"Body message\"\n" +
                    "attributes:\n" +
                    "font = \"Verdana\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, email, date\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "day = \"12\"\n" +
                    "month = \"12\"\n" +
                    "year = \"2018\""
            );
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            for (String input : allTests.keySet()) {
                String answer = allTests.get(input);

                TestCase<Clue> test = new TestCase<>();
                test.addFile("test.txt", input);
                test.setAttach(new Clue(answer, input));
                tests.add(test);
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String user = reply.strip();
            String answer = clue.answer.strip();

            List<String> userLines = user
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            List<String> answerLines = answer
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (userLines.size() < answerLines.size()) {

                LinkedHashSet<String> answerSet = new LinkedHashSet<>();
                answerSet.addAll(answerLines);
                for (String line : userLines) {
                    answerSet.remove(line);
                }
                if (!answerSet.isEmpty()) {
                    String notFoundLine = answerSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not found in output:\n" + notFoundLine);
                }
                return new CheckResult(false);

            } else if (userLines.size() > answerLines.size()) {

                LinkedHashSet<String> userSet = new LinkedHashSet<>();
                userSet.addAll(answerLines);
                for (String line : answerLines) {
                    userSet.remove(line);
                }
                if (!userSet.isEmpty()) {
                    String excessLine = userSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not needed in output:\n" + excessLine);
                }
                return new CheckResult(false);

            } else {

                for (int i = 0; i < userLines.size(); i++) {

                    String userLine = userLines.get(i);
                    String answerLine = answerLines.get(i);

                    if (!userLine.equals(answerLine)) {
                        return new CheckResult(false,
                            "The following line was expected:\n" + answerLine + "\n" +
                                "The following line was given:\n" + userLine);
                    }
                }

                return CheckResult.TRUE;
            }
        }
    }
  learner_created: false
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/converter/json/JsonElement.java
  visible: true
  text: |
    package converter.json;

    import java.util.Collections;
    import java.util.List;
    import java.util.StringJoiner;

    public class JsonElement {
        public final List<JsonEntity> entities;

        public JsonElement(String name) {
            this(Collections.singletonList(new JsonEntity(name)));
        }

        public JsonElement(String name, String value) {
            this(Collections.singletonList(new JsonEntity(name, value)));
        }

        public JsonElement(String name, JsonElement value) {
            this(Collections.singletonList(new JsonEntity(name, value)));
        }

        public JsonElement(List<JsonEntity> entities) {
            this.entities = entities;
        }

        @Override
        public String toString() {
            final StringJoiner entityJoiner = new StringJoiner(",");
            for (JsonEntity entity : entities) {
                entityJoiner.add(entity.toString());
            }
            return String.format("{%s}", entityJoiner.toString());
        }
    }
  learner_created: true
- name: src/converter/json/JsonElementValue.java
  visible: true
  text: |
    package converter.json;

    public class JsonElementValue extends JsonValue {
        public final JsonElement value;

        public JsonElementValue(JsonElement value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return value.toString();
        }
    }
  learner_created: true
- name: src/converter/Element.java
  visible: true
  text: |
    package converter;

    public abstract class Element {
        public final String name;
        public final String value;

        public Element(String name) {
            this(name, null);
        }

        public Element(String name, String value) {
            this.name = name;
            this.value = value;
        }
    }
  learner_created: true
- name: src/converter/json/JsonEntity.java
  visible: true
  text: |-
    package converter.json;

    public class JsonEntity {
        public final String name;
        public final JsonValue value;

        public JsonEntity(String name) {
            this(name, new JsonSimpleValue());
        }

        public JsonEntity(String name, String value) {
            this(name, new JsonSimpleValue(value));
        }

        public JsonEntity(String name, JsonElement value) {
            this(name, new JsonElementValue(value));
        }

        public JsonEntity(String name, JsonValue value) {
            this.name = name;
            this.value = value;
        }

        @Override
        public String toString() {
            return String.format("\"%s\":%s", name, value.toString());
        }
    }
  learner_created: true
- name: src/converter/json/JsonValue.java
  visible: true
  text: |
    package converter.json;

    public abstract class JsonValue {
    }
  learner_created: true
- name: src/converter/xml/XmlElement.java
  visible: true
  text: |
    package converter.xml;

    import converter.Element;

    import java.util.List;
    import java.util.StringJoiner;

    public class XmlElement extends Element {
        public final List<XmlAttribute> attributes;

        public XmlElement(String name) {
            this(name, null, null);
        }

        public XmlElement(String name, String value) {
            this(name, value, null);
        }

        public XmlElement(String name, List<XmlAttribute> attributes) {
            this(name, null, attributes);
        }

        public XmlElement(String name, String value, List<XmlAttribute> attributes) {
            super(name, value);
            this.attributes = attributes;
        }

        @Override
        public String toString() {
            if (value == null && attributes == null) {
                return String.format("<%s/>", name);
            } else if (value == null) {
                final StringJoiner attributeJoiner = new StringJoiner(" ");
                for (XmlAttribute attribute : attributes) {
                    attributeJoiner.add(attribute.toString());
                }
                return String.format("<%s %s/>", name, attributeJoiner.toString());
            } else if (attributes == null) {
                return String.format("<%s>%s</%s>", name, value, name);
            } else {
                final StringJoiner attributeJoiner = new StringJoiner(" ");
                for (XmlAttribute attribute : attributes) {
                    attributeJoiner.add(attribute.toString());
                }
                return String.format("<%s %s>%s</%s>", name, attributeJoiner.toString(), value, name);
            }
        }
    }
  learner_created: true
- name: src/converter/json/JsonSimpleValue.java
  visible: true
  text: |
    package converter.json;

    public class JsonSimpleValue extends JsonValue {
        public final String value;

        public JsonSimpleValue() {
            this(null);
        }

        public JsonSimpleValue(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return value != null ? String.format("\"%s\"", value) : "null";
        }
    }
  learner_created: true
- name: src/converter/json/JsonParser.java
  visible: true
  text: |
    package converter.json;

    import java.util.ArrayList;
    import java.util.List;

    public class JsonParser {
        private static final String NAME_REGEX = "\"[^\"]+\"";
        private static final String VALUE_REGEX = "null|\\d+|\"[^\"]*\"";
        private static final String COLON_REGEX = "\\s*:\\s*";
        private static final String INPUT_REGEX = "^\\{\\s*" + NAME_REGEX + COLON_REGEX +
                "(" + VALUE_REGEX + "" +
                "|\\{\\s*" + NAME_REGEX + COLON_REGEX + "(" + VALUE_REGEX + ")" +
                "(\\s*,\\s*" + NAME_REGEX + COLON_REGEX + "(" + VALUE_REGEX + "))*\\s*})" +
                "(\\s*,\\s*" + NAME_REGEX + COLON_REGEX +
                "(" + VALUE_REGEX + "" +
                "|\\{\\s*" + NAME_REGEX + COLON_REGEX + "(" + VALUE_REGEX + ")" +
                "(\\s*,\\s*" + NAME_REGEX + COLON_REGEX + "(" + VALUE_REGEX + "))*\\s*}))*" +
                "\\s*}$";

        public JsonElement parse(String input) {
            final boolean isValid = input.matches(INPUT_REGEX);
            if (!isValid) {
                throw new IllegalArgumentException("No valid input: " + input);
            }
            final int colonIndex = input.indexOf(":");
            final String rawName = input.substring(0, colonIndex);
            final String elementName = getElementName(rawName);
            final String rawValue = input.substring(colonIndex + 1).trim();
            if (rawValue.startsWith("null")) {
                return new JsonElement(elementName);
            } else if (rawName.startsWith("\"")) {
                final int valueEndIndex = rawName.indexOf("\"", 1);
                final String elementValue = rawValue.substring(1, valueEndIndex);
                return new JsonElement(elementName, elementValue);
            } else if (rawName.startsWith("{")) {
                final String[] chunks = rawValue.replace("{", "").split("\\s*,\\s*");
                final List<JsonEntity> elementEntities = new ArrayList<>();
                for (String chunk : chunks) {
                    final JsonEntity jsonEntity = parseEntity(chunk);
                    elementEntities.add(jsonEntity);
                }
                return new JsonElement(elementName, new JsonElement(elementEntities));
            } else {
                throw new IllegalArgumentException("No valid value" + rawValue);
            }
        }

        private JsonEntity parseEntity(String input) {
            final int colonIndex = input.indexOf(":");
            final String rawName = input.substring(0, colonIndex);
            final String elementName = getElementName(rawName);
            final String rawValue = input.substring(colonIndex + 1).trim();
            if (rawValue.startsWith("null")) {
                return new JsonEntity(elementName);
            } else if (rawValue.startsWith("\"")) {
                final int valueEndIndex = rawValue.indexOf("\"", 1);
                final String elementValue = rawValue.substring(1, valueEndIndex);
                return new JsonEntity(elementName, elementValue);
            } else {
                return new JsonEntity(elementName, rawValue);
            }
        }

        private String getElementName(String input) {
            final int nameBeginIndex = input.indexOf("\"");
            final int nameEndIndex = input.indexOf("\"", nameBeginIndex + 1);
            return input.substring(nameBeginIndex + 1, nameEndIndex);
        }
    }
  learner_created: true
- name: src/converter/Attribute.java
  visible: true
  text: |
    package converter;

    public abstract class Attribute {
        public final String name;
        public final String value;

        public Attribute(String name, String value) {
            this.name = name;
            this.value = value;
        }
    }
  learner_created: true
- name: src/converter/xml/XmlAttribute.java
  visible: true
  text: |
    package converter.xml;

    import converter.Attribute;

    public class XmlAttribute extends Attribute {
        public XmlAttribute(String name) {
            this(name, null);
        }

        public XmlAttribute(String name, String value) {
            super(name, value);
        }

        @Override
        public String toString() {
            if (value == null) {
                return name;
            } else {
                return String.format("%s=\"%s\"", name, value);
            }
        }
    }
  learner_created: true
- name: src/converter/xml/XmlConverter.java
  visible: true
  text: |
    package converter.xml;

    import converter.json.JsonElement;
    import converter.json.JsonEntity;

    import java.util.ArrayList;
    import java.util.List;

    public class XmlConverter {
        public JsonElement convertToJson(XmlElement element) {
            final String elementName = element.name;
            final String elementValue = element.value;
            final List<XmlAttribute> elementAttributes = element.attributes;
            if (elementAttributes == null) {
                return new JsonElement(elementName, elementValue);
            } else {
                final List<JsonEntity> entities = new ArrayList<>(elementAttributes.size() + 1);
                for (XmlAttribute attribute : elementAttributes) {
                    entities.add(new JsonEntity("@" + attribute.name, attribute.value));
                }
                entities.add(new JsonEntity("#" + elementName, elementValue));
                return new JsonElement(elementName, new JsonElement(entities));
            }
        }
    }
  learner_created: true
- name: src/converter/json/JsonConverter.java
  visible: true
  text: |
    package converter.json;

    import converter.json.JsonElement;
    import converter.json.JsonElementValue;
    import converter.json.JsonEntity;
    import converter.json.JsonSimpleValue;
    import converter.xml.XmlAttribute;
    import converter.xml.XmlElement;

    import java.util.ArrayList;
    import java.util.List;

    public class JsonConverter {
        public XmlElement convert(JsonElement element) {
            final List<JsonEntity> entities = element.entities;
            final JsonEntity entity = entities.get(0);
            if (entity.value == null) {
                return new XmlElement(entity.name);
            } else if (entity.value instanceof JsonSimpleValue) {
                final JsonSimpleValue jsonValue = (JsonSimpleValue) entity.value;
                return new XmlElement(entity.name, jsonValue.value);
            } else {
                final JsonElementValue attributeValue = (JsonElementValue) entity.value;
                final List<XmlAttribute> attributes = new ArrayList<>();
                String elementValue = null;
                for (JsonEntity valueEntity : attributeValue.value.entities) {
                    final String entityName = valueEntity.name;
                    final JsonSimpleValue entityValue = (JsonSimpleValue) valueEntity.value;
                    if (entityName.startsWith("@")) {
                        attributes.add(new XmlAttribute(entityName.substring(1), entityValue.value));
                    } else if (entityName.startsWith("#")) {
                        elementValue = entityValue.value;
                    }
                }
                return new XmlElement(entity.name, elementValue, attributes);
            }
        }
    }
  learner_created: true
- name: src/converter/x/XPrinter.java
  visible: true
  learner_created: true
- name: src/converter/x/XComplexValue.java
  visible: true
  learner_created: true
- name: src/converter/js/JsValue.java
  visible: true
  learner_created: true
- name: src/converter/js/JsObject.java
  visible: true
  learner_created: true
- name: src/converter/js/JsString.java
  visible: true
  learner_created: true
- name: src/converter/js/JsNumber.java
  visible: true
  learner_created: true
- name: src/converter/js/JsInteger.java
  visible: true
  learner_created: true
- name: src/converter/js/JsArray.java
  visible: true
  learner_created: true
- name: src/converter/js/JsDouble.java
  visible: true
  learner_created: true
- name: src/converter/js/JsBoolean.java
  visible: true
  learner_created: true
- name: src/converter/js/JsNull.java
  visible: true
  learner_created: true
- name: src/converter/js/JsEntity.java
  visible: true
  learner_created: true
- name: src/converter/js/JsParser.java
  visible: true
  learner_created: true
- name: src/converter/js/JsPrinter.java
  visible: true
  learner_created: true
- name: src/converter/js/JsConverter.java
  visible: true
  learner_created: true
- name: src/main/resources/aga.xml
  visible: true
  learner_created: true
- name: src/main/resources/aga.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/61/stages/331/implement
status: Failed
record: 4
