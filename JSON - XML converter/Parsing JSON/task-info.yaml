type: edu
custom_name: stage4
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;
    import java.util.stream.Collectors;

    class Clue {
        String answer;
        String input;

        Clue(String answer, String input) {
            this.answer = answer.strip();
            this.input = input.strip();
        }
    }

    public class ConverterTest extends StageTest<Clue> {
        public ConverterTest() throws Exception {
            super(Main.class);
        }

        static Map<String, String> allTests;

        static {
            allTests = new LinkedHashMap<>();

            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-000\"\n" +
                    "        },\n" +
                    "        \"empty1\": null,\n" +
                    "        \"empty2\": { },\n" +
                    "        \"empty3\": \"\",\n" +
                    "        \"inner1\": {\n" +
                    "            \"inner2\": {\n" +
                    "                \"inner3\": {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": \"value2\"\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner4\": {\n" +
                    "            \"@\": 123,\n" +
                    "            \"#inner4\": \"value3\"\n" +
                    "        },\n" +
                    "        \"inner5\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#inner4\": \"value4\"\n" +
                    "        },\n" +
                    "        \"inner6\": {\n" +
                    "            \"@attr2\": 789.321,\n" +
                    "            \"#inner6\": \"value5\"\n" +
                    "        },\n" +
                    "        \"inner7\": {\n" +
                    "            \"#inner7\": \"value6\"\n" +
                    "        },\n" +
                    "        \"inner8\": {\n" +
                    "            \"@attr3\": \"value7\"\n" +
                    "        },\n" +
                    "        \"inner9\": {\n" +
                    "            \"@attr4\": \"value8\",\n" +
                    "            \"#inner9\": \"value9\",\n" +
                    "            \"something\": \"value10\"\n" +
                    "        },\n" +
                    "        \"inner10\": {\n" +
                    "            \"@attr5\": null,\n" +
                    "            \"#inner10\": null\n" +
                    "        },\n" +
                    "        \"inner11\": {\n" +
                    "            \"@\": null,\n" +
                    "            \"#\": null\n" +
                    "        },\n" +
                    "        \"inner12\": {\n" +
                    "            \"@somekey\": \"attrvalue\",\n" +
                    "            \"#inner12\": null,\n" +
                    "            \"somekey\": \"keyvalue\",\n" +
                    "            \"inner12\": \"notnull\"\n" +
                    "        },\n" +
                    "        \"\": {\n" +
                    "            \"#\": null,\n" +
                    "            \"secret\": \"this won't be converted\"\n" +
                    "        }\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"6753322\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-000-000\"\n" +
                    "attributes:\n" +
                    "region = \"Russia\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, empty1\n" +
                    "value = null\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, empty2\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, empty3\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3, key1\n" +
                    "value = \"value1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3, key2\n" +
                    "value = \"value2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner4\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner4, inner4\n" +
                    "value = \"value3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5, attr1\n" +
                    "value = \"123.456\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5, inner4\n" +
                    "value = \"value4\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner6\n" +
                    "value = \"value5\"\n" +
                    "attributes:\n" +
                    "attr2 = \"789.321\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner7\n" +
                    "value = \"value6\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner8\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner8, attr3\n" +
                    "value = \"value7\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, attr4\n" +
                    "value = \"value8\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, inner9\n" +
                    "value = \"value9\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, something\n" +
                    "value = \"value10\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner10\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "attr5 = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner11\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12, somekey\n" +
                    "value = \"keyvalue\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12, inner12\n" +
                    "value = \"notnull\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = meta\n" +
                    "\n" +
                    "Element:\n" +
                    "path = meta, version\n" +
                    "value = \"0.01\""
            );

            allTests.put(
                "{\n" +
                    "    \"root1\": {\n" +
                    "        \"@attr1\": \"val1\",\n" +
                    "        \"@attr2\": \"val2\",\n" +
                    "        \"#root1\": {\n" +
                    "            \"elem1\": {\n" +
                    "                \"@attr3\": \"val3\",\n" +
                    "                \"@attr4\": \"val4\",\n" +
                    "                \"#elem1\": \"Value1\"\n" +
                    "            },\n" +
                    "            \"elem2\": {\n" +
                    "                \"@attr5\": \"val5\",\n" +
                    "                \"@attr6\": \"val6\",\n" +
                    "                \"#elem2\": \"Value2\"\n" +
                    "            }\n" +
                    "        }\n" +
                    "    },\n" +
                    "    \"root2\": {\n" +
                    "        \"@attr1\": null,\n" +
                    "        \"@attr2\": \"\",\n" +
                    "        \"#root2\": null\n" +
                    "    },\n" +
                    "    \"root3\": {\n" +
                    "        \"@attr1\": \"val2\",\n" +
                    "        \"@attr2\": \"val1\",\n" +
                    "        \"#root3\": \"\"\n" +
                    "    },\n" +
                    "    \"root4\": \"Value4\"\n" +
                    "}",

                "Element:\n" +
                    "path = root1\n" +
                    "attributes:\n" +
                    "attr1 = \"val1\"\n" +
                    "attr2 = \"val2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root1, elem1\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "attr3 = \"val3\"\n" +
                    "attr4 = \"val4\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root1, elem2\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "attr5 = \"val5\"\n" +
                    "attr6 = \"val6\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root2\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "attr1 = \"\"\n" +
                    "attr2 = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root3\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "attr1 = \"val2\"\n" +
                    "attr2 = \"val1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root4\n" +
                    "value = \"Value4\""
            );

            allTests.put("{\"root1\":{\"@attr1\":\"val1\"," +
                "\"@attr2\":\"val2\",\"#root1\":{\"elem1\":{\"" +
                "@attr3\":\"val3\",\"@attr4\":\"val4\",\"#ele" +
                "m1\":\"Value1\"},\"elem2\":{\"@attr5\":\"val" +
                "5\",\"@attr6\":\"val6\",\"#elem2\":\"Value2\"" +
                "}}},\"root2\":{\"@attr1\":null,\"@attr2\":\"" +
                "\",\"#root2\":null},\"root3\":{\"@attr1\":\"" +
                "val2\",\"@attr2\":\"val1\",\"#root3\":\"\"}," +
                "\"root4\":\"Value4\"}",


                "Element:\n" +
                    "path = root1\n" +
                    "attributes:\n" +
                    "attr1 = \"val1\"\n" +
                    "attr2 = \"val2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root1, elem1\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "attr3 = \"val3\"\n" +
                    "attr4 = \"val4\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root1, elem2\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "attr5 = \"val5\"\n" +
                    "attr6 = \"val6\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root2\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "attr1 = \"\"\n" +
                    "attr2 = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root3\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "attr1 = \"val2\"\n" +
                    "attr2 = \"val1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root4\n" +
                    "value = \"Value4\""
            );

            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"13243547\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"USA\",\n" +
                    "            \"#number\": \"8-900-000-999\"\n" +
                    "        },\n" +
                    "        \"inner1\": {\n" +
                    "            \"inner2\": {\n" +
                    "                \"inner3\": {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": \"value2\"\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner4\": {\n" +
                    "            \"@\": 123,\n" +
                    "            \"#inner4\": \"value3\"\n" +
                    "        },\n" +
                    "        \"inner5\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#inner4\": \"value4\"\n" +
                    "        },\n" +
                    "        \"inner6\": {\n" +
                    "            \"@attr2\": 789.321,\n" +
                    "            \"#inner6\": \"value5\"\n" +
                    "        },\n" +
                    "        \"inner7\": {\n" +
                    "            \"#inner7\": \"value6\"\n" +
                    "        },\n" +
                    "        \"inner8\": {\n" +
                    "            \"@attr3\": \"value7\"\n" +
                    "        },\n" +
                    "        \"inner9\": {\n" +
                    "            \"@attr4\": \"value8\",\n" +
                    "            \"#inner9\": \"value9\",\n" +
                    "            \"something\": \"value10\"\n" +
                    "        },\n" +
                    "        \"inner10\": {\n" +
                    "            \"@attr5\": null,\n" +
                    "            \"#inner10\": null\n" +
                    "        },\n" +
                    "        \"inner11\": {\n" +
                    "            \"@\": null,\n" +
                    "            \"#\": null\n" +
                    "        },\n" +
                    "        \"inner12\": {\n" +
                    "            \"@somekey\": \"attrvalue\",\n" +
                    "            \"#inner12\": null,\n" +
                    "            \"somekey\": \"keyvalue\",\n" +
                    "            \"inner12\": \"notnull\"\n" +
                    "        },\n" +
                    "        \"\": {\n" +
                    "            \"#\": null,\n" +
                    "            \"secret\": \"this won't be converted\"\n" +
                    "        }\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"13243547\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-000-999\"\n" +
                    "attributes:\n" +
                    "region = \"USA\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3, key1\n" +
                    "value = \"value1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3, key2\n" +
                    "value = \"value2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner4\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner4, inner4\n" +
                    "value = \"value3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5, attr1\n" +
                    "value = \"123.456\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5, inner4\n" +
                    "value = \"value4\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner6\n" +
                    "value = \"value5\"\n" +
                    "attributes:\n" +
                    "attr2 = \"789.321\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner7\n" +
                    "value = \"value6\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner8\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner8, attr3\n" +
                    "value = \"value7\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, attr4\n" +
                    "value = \"value8\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, inner9\n" +
                    "value = \"value9\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, something\n" +
                    "value = \"value10\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner10\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "attr5 = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner11\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12, somekey\n" +
                    "value = \"keyvalue\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12, inner12\n" +
                    "value = \"notnull\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = meta\n" +
                    "\n" +
                    "Element:\n" +
                    "path = meta, version\n" +
                    "value = \"0.01\""
            );
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            for (String input : allTests.keySet()) {
                String answer = allTests.get(input);

                TestCase<Clue> test = new TestCase<>();
                test.addFile("test.txt", input);
                test.setAttach(new Clue(answer, input));

                tests.add(test);
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String user = reply.strip();
            String answer = clue.answer.strip();

            List<String> userLines = user
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            List<String> answerLines = answer
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (userLines.size() < answerLines.size()) {

                LinkedHashSet<String> answerSet = new LinkedHashSet<>();
                answerSet.addAll(answerLines);
                for (String line : userLines) {
                    answerSet.remove(line);
                }
                if (!answerSet.isEmpty()) {
                    String notFoundLine = answerSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not found in output:\n" + notFoundLine);
                }
                return new CheckResult(false);

            } else if (userLines.size() > answerLines.size()) {

                LinkedHashSet<String> userSet = new LinkedHashSet<>();
                userSet.addAll(answerLines);
                for (String line : answerLines) {
                    userSet.remove(line);
                }
                if (!userSet.isEmpty()) {
                    String excessLine = userSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not needed in output:\n" + excessLine);
                }
                return new CheckResult(false);

            } else {

                for (int i = 0; i < userLines.size(); i++) {

                    String userLine = userLines.get(i);
                    String answerLine = answerLines.get(i);

                    if (!userLine.equals(answerLine)) {
                        return new CheckResult(false,
                            "The following line was expected:\n" + answerLine + "\n" +
                                "The following line was given:\n" + userLine);
                    }
                }

                return CheckResult.correct();
            }
        }
    }
  learner_created: false
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    import converter.json.JsonConverter;
    import converter.json.JsonElement;
    import converter.json.JsonParser;
    import converter.x.XElement;
    import converter.x.XParser;
    import converter.x.XPrinter;
    import converter.xml.XmlElement;
    import org.jetbrains.annotations.NotNull;

    import java.io.File;
    import java.io.FileReader;
    import java.io.IOException;

    public class Main {
        public static void main(String[] args) throws IOException {
            final XElement xml = new XParser().parse(getInputFromFile());
            new XPrinter().print(xml);
        }

        @NotNull
        private static String getExample1() {
            return "<transaction>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-000-00-00</number>\n" +
                    "    <nonattr />\n" +
                    "    <nonattr></nonattr>\n" +
                    "    <nonattr>text</nonattr>\n" +
                    "    <attr id=\"1\" />\n" +
                    "    <attr id=\"2\"></attr>\n" +
                    "    <attr id=\"3\">text</attr>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</transaction>";
        }

        private static void task() throws IOException {
            final String input = getInputFromFile();
            if (isXML(input)) {

            } else if (isJSON(input)) {
                final JsonParser jsonParser = new JsonParser();
                final JsonElement jsonElement = jsonParser.parse(input);
                final JsonConverter jsonConverter = new JsonConverter();
                final XmlElement xmlElement = jsonConverter.convert(jsonElement);
                System.out.println(xmlElement);
            } else {
                throw new IllegalArgumentException("Unknown type");
            }
        }

        private static String getInputFromFile() throws IOException {
            final File file = new File("test.txt");
            try (final FileReader reader = new FileReader(file)) {
                final StringBuilder builder = new StringBuilder();
                final char[] buffer = new char[1024];
                int count;
                while ((count = reader.read(buffer)) != -1) {
                    builder.append(new String(buffer, 0, count));
                }
                return builder.toString();
            }
        }

        private static boolean isJSON(String input) {
            return input.startsWith("{");
        }

        private static boolean isXML(String input) {
            return input.startsWith("<");
        }
    }
  learner_created: false
- name: src/converter/json/JsonElement.java
  visible: true
  text: |
    package converter.json;

    import java.util.Collections;
    import java.util.List;
    import java.util.StringJoiner;

    public class JsonElement {
        public final List<JsonEntity> entities;

        public JsonElement(String name) {
            this(Collections.singletonList(new JsonEntity(name)));
        }

        public JsonElement(String name, String value) {
            this(Collections.singletonList(new JsonEntity(name, value)));
        }

        public JsonElement(String name, JsonElement value) {
            this(Collections.singletonList(new JsonEntity(name, value)));
        }

        public JsonElement(List<JsonEntity> entities) {
            this.entities = entities;
        }

        @Override
        public String toString() {
            final StringJoiner entityJoiner = new StringJoiner(",");
            for (JsonEntity entity : entities) {
                entityJoiner.add(entity.toString());
            }
            return String.format("{%s}", entityJoiner.toString());
        }
    }
  learner_created: false
- name: src/converter/json/JsonElementValue.java
  visible: true
  text: |
    package converter.json;

    public class JsonElementValue extends JsonValue {
        public final JsonElement value;

        public JsonElementValue(JsonElement value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return value.toString();
        }
    }
  learner_created: false
- name: src/converter/Element.java
  visible: true
  text: |
    package converter;

    public abstract class Element extends Value {
        public final String name;
        public final Value value;

        public Element(String name) {
            this(name, null);
        }

        public Element(String name, Value value) {
            this.name = name;
            this.value = value;
        }
    }
  learner_created: false
- name: src/converter/json/JsonEntity.java
  visible: true
  text: |-
    package converter.json;

    public class JsonEntity {
        public final String name;
        public final JsonValue value;

        public JsonEntity(String name) {
            this(name, new JsonSimpleValue());
        }

        public JsonEntity(String name, String value) {
            this(name, new JsonSimpleValue(value));
        }

        public JsonEntity(String name, JsonElement value) {
            this(name, new JsonElementValue(value));
        }

        public JsonEntity(String name, JsonValue value) {
            this.name = name;
            this.value = value;
        }

        @Override
        public String toString() {
            return String.format("\"%s\":%s", name, value.toString());
        }
    }
  learner_created: false
- name: src/converter/json/JsonValue.java
  visible: true
  text: |
    package converter.json;

    public abstract class JsonValue {
    }
  learner_created: false
- name: src/converter/xml/XmlElement.java
  visible: true
  text: |
    package converter.xml;

    import converter.Element;

    import java.util.List;
    import java.util.StringJoiner;

    public class XmlElement extends Element {
        public final List<XmlAttribute> attributes;

        public XmlElement(String name) {
            this(name, null, null);
        }

        public XmlElement(String name, XmlValue value) {
            this(name, value, null);
        }

        public XmlElement(String name, List<XmlAttribute> attributes) {
            this(name, null, attributes);
        }

        public XmlElement(String name, XmlValue value, List<XmlAttribute> attributes) {
            super(name, value);
            this.attributes = attributes;
        }

        @Override
        public String toString() {
            if (value == null && attributes == null) {
                return String.format("<%s/>", name);
            } else if (value == null) {
                final StringJoiner attributeJoiner = new StringJoiner(" ");
                for (XmlAttribute attribute : attributes) {
                    attributeJoiner.add(attribute.toString());
                }
                return String.format("<%s %s/>", name, attributeJoiner.toString());
            } else if (attributes == null) {
                return String.format("<%s>%s</%s>", name, value, name);
            } else {
                final StringJoiner attributeJoiner = new StringJoiner(" ");
                for (XmlAttribute attribute : attributes) {
                    attributeJoiner.add(attribute.toString());
                }
                return String.format("<%s %s>%s</%s>", name, attributeJoiner.toString(), value, name);
            }
        }
    }
  learner_created: false
- name: src/converter/json/JsonSimpleValue.java
  visible: true
  text: |
    package converter.json;

    public class JsonSimpleValue extends JsonValue {
        public final String value;

        public JsonSimpleValue() {
            this(null);
        }

        public JsonSimpleValue(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return value != null ? String.format("\"%s\"", value) : "null";
        }
    }
  learner_created: false
- name: src/converter/json/JsonParser.java
  visible: true
  text: |
    package converter.json;

    import java.util.ArrayList;
    import java.util.List;

    public class JsonParser {
        private static final String NAME_REGEX = "\"[^\"]+\"";
        private static final String VALUE_REGEX = "null|\\d+|\"[^\"]*\"";
        private static final String COLON_REGEX = "\\s*:\\s*";
        private static final String INPUT_REGEX = "^\\{\\s*" + NAME_REGEX + COLON_REGEX +
                "(" + VALUE_REGEX + "" +
                "|\\{\\s*" + NAME_REGEX + COLON_REGEX + "(" + VALUE_REGEX + ")" +
                "(\\s*,\\s*" + NAME_REGEX + COLON_REGEX + "(" + VALUE_REGEX + "))*\\s*})" +
                "(\\s*,\\s*" + NAME_REGEX + COLON_REGEX +
                "(" + VALUE_REGEX + "" +
                "|\\{\\s*" + NAME_REGEX + COLON_REGEX + "(" + VALUE_REGEX + ")" +
                "(\\s*,\\s*" + NAME_REGEX + COLON_REGEX + "(" + VALUE_REGEX + "))*\\s*}))*" +
                "\\s*}$";

        public JsonElement parse(String input) {
            final boolean isValid = input.matches(INPUT_REGEX);
            if (!isValid) {
                throw new IllegalArgumentException("No valid input: " + input);
            }
            final int colonIndex = input.indexOf(":");
            final String rawName = input.substring(0, colonIndex);
            final String elementName = getElementName(rawName);
            final String rawValue = input.substring(colonIndex + 1).trim();
            if (rawValue.startsWith("null")) {
                return new JsonElement(elementName);
            } else if (rawName.startsWith("\"")) {
                final int valueEndIndex = rawName.indexOf("\"", 1);
                final String elementValue = rawValue.substring(1, valueEndIndex);
                return new JsonElement(elementName, elementValue);
            } else if (rawName.startsWith("{")) {
                final String[] chunks = rawValue.replace("{", "").split("\\s*,\\s*");
                final List<JsonEntity> elementEntities = new ArrayList<>();
                for (String chunk : chunks) {
                    final JsonEntity jsonEntity = parseEntity(chunk);
                    elementEntities.add(jsonEntity);
                }
                return new JsonElement(elementName, new JsonElement(elementEntities));
            } else {
                throw new IllegalArgumentException("No valid value" + rawValue);
            }
        }

        private JsonEntity parseEntity(String input) {
            final int colonIndex = input.indexOf(":");
            final String rawName = input.substring(0, colonIndex);
            final String elementName = getElementName(rawName);
            final String rawValue = input.substring(colonIndex + 1).trim();
            if (rawValue.startsWith("null")) {
                return new JsonEntity(elementName);
            } else if (rawValue.startsWith("\"")) {
                final int valueEndIndex = rawValue.indexOf("\"", 1);
                final String elementValue = rawValue.substring(1, valueEndIndex);
                return new JsonEntity(elementName, elementValue);
            } else {
                return new JsonEntity(elementName, rawValue);
            }
        }

        private String getElementName(String input) {
            final int nameBeginIndex = input.indexOf("\"");
            final int nameEndIndex = input.indexOf("\"", nameBeginIndex + 1);
            return input.substring(nameBeginIndex + 1, nameEndIndex);
        }
    }
  learner_created: false
- name: src/converter/Attribute.java
  visible: true
  text: |
    package converter;

    public abstract class Attribute {
        public final String name;
        public final String value;

        public Attribute(String name, String value) {
            this.name = name;
            this.value = value;
        }
    }
  learner_created: false
- name: src/converter/xml/XmlAttribute.java
  visible: true
  text: |
    package converter.xml;

    import converter.Attribute;

    public class XmlAttribute extends Attribute {
        public XmlAttribute(String name) {
            this(name, null);
        }

        public XmlAttribute(String name, String value) {
            super(name, value);
        }

        @Override
        public String toString() {
            if (value == null) {
                return name;
            } else {
                return String.format("%s=\"%s\"", name, value);
            }
        }
    }
  learner_created: false
- name: src/converter/xml/XmlConverter.java
  visible: true
  text: |
    package converter.xml;

    import converter.json.JsonElement;
    import converter.json.JsonEntity;

    import java.util.ArrayList;
    import java.util.List;

    public class XmlConverter {
        public JsonElement convertToJson(XmlElement element) {
    //        final String elementName = element.name;
    //        final String elementValue = element.value;
    //        final List<XmlAttribute> elementAttributes = element.attributes;
    //        if (elementAttributes == null) {
    //            return new JsonElement(elementName, elementValue);
    //        } else {
    //            final List<JsonEntity> entities = new ArrayList<>(elementAttributes.size() + 1);
    //            for (XmlAttribute attribute : elementAttributes) {
    //                entities.add(new JsonEntity("@" + attribute.name, attribute.value));
    //            }
    //            entities.add(new JsonEntity("#" + elementName, elementValue));
    //            return new JsonElement(elementName, new JsonElement(entities));
    //        }
            return null;
        }
    }
  learner_created: false
- name: src/converter/json/JsonConverter.java
  visible: true
  text: |
    package converter.json;

    import converter.json.JsonElement;
    import converter.json.JsonElementValue;
    import converter.json.JsonEntity;
    import converter.json.JsonSimpleValue;
    import converter.xml.XmlAttribute;
    import converter.xml.XmlElement;

    import java.util.ArrayList;
    import java.util.List;

    public class JsonConverter {
        public XmlElement convert(JsonElement element) {
    //        final List<JsonEntity> entities = element.entities;
    //        final JsonEntity entity = entities.get(0);
    //        if (entity.value == null) {
    //            return new XmlElement(entity.name);
    //        } else if (entity.value instanceof JsonSimpleValue) {
    //            final JsonSimpleValue jsonValue = (JsonSimpleValue) entity.value;
    //            return new XmlElement(entity.name, jsonValue.value);
    //        } else {
    //            final JsonElementValue attributeValue = (JsonElementValue) entity.value;
    //            final List<XmlAttribute> attributes = new ArrayList<>();
    //            String elementValue = null;
    //            for (JsonEntity valueEntity : attributeValue.value.entities) {
    //                final String entityName = valueEntity.name;
    //                final JsonSimpleValue entityValue = (JsonSimpleValue) valueEntity.value;
    //                if (entityName.startsWith("@")) {
    //                    attributes.add(new XmlAttribute(entityName.substring(1), entityValue.value));
    //                } else if (entityName.startsWith("#")) {
    //                    elementValue = entityValue.value;
    //                }
    //            }
    //            return new XmlElement(entity.name, elementValue, attributes);
    //        }
            return null;
        }
    }
  learner_created: false
- name: src/converter/x/XPrinter.java
  visible: true
  text: |
    package converter.x;

    import java.io.PrintStream;

    public class XPrinter {
        private PrintStream printer;

        public XPrinter() {
            printer = System.out;
        }

        public void print(XElement element) {
            final String path = element.name;
            final XValue value = element.value;
            printElement();
            printPath(path);
            printValue(value);
            printAttributes(element.attributes);
            printer.println();
            printNext(path, value);
        }

        private void printNext(String path, XValue value) {
            if (value instanceof XElement) {
                print(path, (XElement) value);
            } else if (value instanceof XElements) {
                for (XComplexValue xElement : ((XElements) value).values) {
                    print(path, (XElement) xElement);
                }
            }
        }

        private void print(String parentPath, XElement element) {
            final String path = parentPath + ", " + element.name;
            final XValue value = element.value;
            printElement();
            printPath(path);
            printValue(value);
            printAttributes(element.attributes);
            printer.println();
            printNext(path, value);
        }

        private void printElement() {
            printer.println("Element:");
        }

        private void printPath(String path) {
            printer.println("path = " + path);
        }

        private void printValue(XValue value) {
            if (value == null) {
                printer.println("value = null");
            } else if (value instanceof XSimpleValue) {
                final XSimpleValue simpleValue = (XSimpleValue) value;
                printer.println("value = \"" + simpleValue + "\"");
            }
        }

        private void printAttributes(XAttributes attributes) {
            if (attributes != null) {
                printer.println("attributes:");
                for (XAttribute attribute : attributes.values) {
                    printer.println(attribute.name + " = \"" + attribute.value + "\"");
                }
            }
        }
    }
  learner_created: false
- name: src/converter/x/XComplexValue.java
  visible: true
  text: |
    package converter.x;

    public abstract class XComplexValue extends XValue {
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/61/stages/332/implement
status: Solved
record: 1
